using Jake2.Util;
using System;

namespace Jake2.Game
{
	public class gclient_t
	{
		public gclient_t( Int32 index )
		{
			this.index = index;
		}

		public player_state_t ps = new player_state_t();
		public Int32 ping;
		public client_persistant_t pers = new client_persistant_t();
		public client_respawn_t resp = new client_respawn_t();
		public pmove_state_t old_pmove = new pmove_state_t();
		public Boolean showscores;
		public Boolean showinventory;
		public Boolean showhelp;
		public Boolean showhelpicon;
		public Int32 ammo_index;
		public Int32 buttons;
		public Int32 oldbuttons;
		public Int32 latched_buttons;
		public Boolean weapon_thunk;
		public gitem_t newweapon;
		public Int32 damage_armor;
		public Int32 damage_parmor;
		public Int32 damage_blood;
		public Int32 damage_knockback;
		public Single[] damage_from = new Single[] { 0, 0, 0 };
		public Single killer_yaw;
		public Int32 weaponstate;
		public Single[] kick_angles = new Single[] { 0, 0, 0 };
		public Single[] kick_origin = new Single[] { 0, 0, 0 };
		public Single v_dmg_roll, v_dmg_pitch, v_dmg_time;
		public Single fall_time, fall_value;
		public Single damage_alpha;
		public Single bonus_alpha;
		public Single[] damage_blend = new Single[] { 0, 0, 0 };
		public Single[] v_angle = new Single[] { 0, 0, 0 };
		public Single bobtime;
		public Single[] oldviewangles = new Single[] { 0, 0, 0 };
		public Single[] oldvelocity = new Single[] { 0, 0, 0 };
		public Single next_drown_time;
		public Int32 old_waterlevel;
		public Int32 breather_sound;
		public Int32 machinegun_shots;
		public Int32 anim_end;
		public Int32 anim_priority;
		public Boolean anim_duck;
		public Boolean anim_run;
		public Single quad_framenum;
		public Single invincible_framenum;
		public Single breather_framenum;
		public Single enviro_framenum;
		public Boolean grenade_blew_up;
		public Single grenade_time;
		public Int32 silencer_shots;
		public Int32 weapon_sound;
		public Single pickup_msg_time;
		public Single flood_locktill;
		public Single[] flood_when = new Single[10];
		public Int32 flood_whenhead;
		public Single respawn_time;
		public edict_t chase_target;
		public Boolean update_chase;
		public Int32 index;
		public virtual void Clear( )
		{
			ping = 0;
			pers = new client_persistant_t();
			resp = new client_respawn_t();
			old_pmove = new pmove_state_t();
			showscores = false;
			showinventory = false;
			showhelp = false;
			showhelpicon = false;
			ammo_index = 0;
			buttons = oldbuttons = latched_buttons = 0;
			weapon_thunk = false;
			newweapon = null;
			damage_armor = 0;
			damage_parmor = 0;
			damage_blood = 0;
			damage_knockback = 0;
			killer_yaw = 0;
			damage_from = new Single[3];
			weaponstate = 0;
			kick_angles = new Single[3];
			kick_origin = new Single[3];
			v_dmg_roll = v_dmg_pitch = v_dmg_time = 0;
			fall_time = fall_value = 0;
			damage_alpha = 0;
			bonus_alpha = 0;
			damage_blend = new Single[3];
			v_angle = new Single[3];
			bobtime = 0;
			oldviewangles = new Single[3];
			oldvelocity = new Single[3];
			next_drown_time = 0;
			old_waterlevel = 0;
			breather_sound = 0;
			machinegun_shots = 0;
			anim_end = 0;
			anim_priority = 0;
			anim_duck = false;
			anim_run = false;
			quad_framenum = 0;
			invincible_framenum = 0;
			breather_framenum = 0;
			enviro_framenum = 0;
			grenade_blew_up = false;
			grenade_time = 0;
			silencer_shots = 0;
			weapon_sound = 0;
			pickup_msg_time = 0;
			flood_locktill = 0;
			flood_when = new Single[10];
			flood_whenhead = 0;
			respawn_time = 0;
			chase_target = null;
			update_chase = false;
		}

		public virtual void Read( QuakeFile f )
		{
			ps.Load( f );
			ping = f.ReadInt32();
			pers.Read( f );
			resp.Read( f );
			old_pmove.Load( f );
			showscores = f.ReadInt32() != 0;
			showinventory = f.ReadInt32() != 0;
			showhelp = f.ReadInt32() != 0;
			showhelpicon = f.ReadInt32() != 0;
			ammo_index = f.ReadInt32();
			buttons = f.ReadInt32();
			oldbuttons = f.ReadInt32();
			latched_buttons = f.ReadInt32();
			weapon_thunk = f.ReadInt32() != 0;
			newweapon = f.ReadItem();
			damage_armor = f.ReadInt32();
			damage_parmor = f.ReadInt32();
			damage_blood = f.ReadInt32();
			damage_knockback = f.ReadInt32();
			damage_from[0] = f.ReadSingle();
			damage_from[1] = f.ReadSingle();
			damage_from[2] = f.ReadSingle();
			killer_yaw = f.ReadSingle();
			weaponstate = f.ReadInt32();
			kick_angles[0] = f.ReadSingle();
			kick_angles[1] = f.ReadSingle();
			kick_angles[2] = f.ReadSingle();
			kick_origin[0] = f.ReadSingle();
			kick_origin[1] = f.ReadSingle();
			kick_origin[2] = f.ReadSingle();
			v_dmg_roll = f.ReadSingle();
			v_dmg_pitch = f.ReadSingle();
			v_dmg_time = f.ReadSingle();
			fall_time = f.ReadSingle();
			fall_value = f.ReadSingle();
			damage_alpha = f.ReadSingle();
			bonus_alpha = f.ReadSingle();
			damage_blend[0] = f.ReadSingle();
			damage_blend[1] = f.ReadSingle();
			damage_blend[2] = f.ReadSingle();
			v_angle[0] = f.ReadSingle();
			v_angle[1] = f.ReadSingle();
			v_angle[2] = f.ReadSingle();
			bobtime = f.ReadSingle();
			oldviewangles[0] = f.ReadSingle();
			oldviewangles[1] = f.ReadSingle();
			oldviewangles[2] = f.ReadSingle();
			oldvelocity[0] = f.ReadSingle();
			oldvelocity[1] = f.ReadSingle();
			oldvelocity[2] = f.ReadSingle();
			next_drown_time = f.ReadSingle();
			old_waterlevel = f.ReadInt32();
			breather_sound = f.ReadInt32();
			machinegun_shots = f.ReadInt32();
			anim_end = f.ReadInt32();
			anim_priority = f.ReadInt32();
			anim_duck = f.ReadInt32() != 0;
			anim_run = f.ReadInt32() != 0;
			quad_framenum = f.ReadSingle();
			invincible_framenum = f.ReadSingle();
			breather_framenum = f.ReadSingle();
			enviro_framenum = f.ReadSingle();
			grenade_blew_up = f.ReadInt32() != 0;
			grenade_time = f.ReadSingle();
			silencer_shots = f.ReadInt32();
			weapon_sound = f.ReadInt32();
			pickup_msg_time = f.ReadSingle();
			flood_locktill = f.ReadSingle();
			flood_when[0] = f.ReadSingle();
			flood_when[1] = f.ReadSingle();
			flood_when[2] = f.ReadSingle();
			flood_when[3] = f.ReadSingle();
			flood_when[4] = f.ReadSingle();
			flood_when[5] = f.ReadSingle();
			flood_when[6] = f.ReadSingle();
			flood_when[7] = f.ReadSingle();
			flood_when[8] = f.ReadSingle();
			flood_when[9] = f.ReadSingle();
			flood_whenhead = f.ReadInt32();
			respawn_time = f.ReadSingle();
			chase_target = f.ReadEdictRef();
			update_chase = f.ReadInt32() != 0;
			if ( f.ReadInt32() != 8765 )
				System.Diagnostics.Debug.WriteLine( "game client load failed for num=" + index );
		}

		public virtual void Write( QuakeFile f )
		{
			ps.Write( f );
			f.Write( ping );
			pers.Write( f );
			resp.Write( f );
			old_pmove.Write( f );
			f.Write( showscores ? 1 : 0 );
			f.Write( showinventory ? 1 : 0 );
			f.Write( showhelp ? 1 : 0 );
			f.Write( showhelpicon ? 1 : 0 );
			f.Write( ammo_index );
			f.Write( buttons );
			f.Write( oldbuttons );
			f.Write( latched_buttons );
			f.Write( weapon_thunk ? 1 : 0 );
			f.WriteItem( newweapon );
			f.Write( damage_armor );
			f.Write( damage_parmor );
			f.Write( damage_blood );
			f.Write( damage_knockback );
			f.Write( damage_from[0] );
			f.Write( damage_from[1] );
			f.Write( damage_from[2] );
			f.Write( killer_yaw );
			f.Write( weaponstate );
			f.Write( kick_angles[0] );
			f.Write( kick_angles[1] );
			f.Write( kick_angles[2] );
			f.Write( kick_origin[0] );
			f.Write( kick_origin[1] );
			f.Write( kick_origin[2] );
			f.Write( v_dmg_roll );
			f.Write( v_dmg_pitch );
			f.Write( v_dmg_time );
			f.Write( fall_time );
			f.Write( fall_value );
			f.Write( damage_alpha );
			f.Write( bonus_alpha );
			f.Write( damage_blend[0] );
			f.Write( damage_blend[1] );
			f.Write( damage_blend[2] );
			f.Write( v_angle[0] );
			f.Write( v_angle[1] );
			f.Write( v_angle[2] );
			f.Write( bobtime );
			f.Write( oldviewangles[0] );
			f.Write( oldviewangles[1] );
			f.Write( oldviewangles[2] );
			f.Write( oldvelocity[0] );
			f.Write( oldvelocity[1] );
			f.Write( oldvelocity[2] );
			f.Write( next_drown_time );
			f.Write( old_waterlevel );
			f.Write( breather_sound );
			f.Write( machinegun_shots );
			f.Write( anim_end );
			f.Write( anim_priority );
			f.Write( anim_duck ? 1 : 0 );
			f.Write( anim_run ? 1 : 0 );
			f.Write( quad_framenum );
			f.Write( invincible_framenum );
			f.Write( breather_framenum );
			f.Write( enviro_framenum );
			f.Write( grenade_blew_up ? 1 : 0 );
			f.Write( grenade_time );
			f.Write( silencer_shots );
			f.Write( weapon_sound );
			f.Write( pickup_msg_time );
			f.Write( flood_locktill );
			f.Write( flood_when[0] );
			f.Write( flood_when[1] );
			f.Write( flood_when[2] );
			f.Write( flood_when[3] );
			f.Write( flood_when[4] );
			f.Write( flood_when[5] );
			f.Write( flood_when[6] );
			f.Write( flood_when[7] );
			f.Write( flood_when[8] );
			f.Write( flood_when[9] );
			f.Write( flood_whenhead );
			f.Write( respawn_time );
			f.WriteEdictRef( chase_target );
			f.Write( update_chase ? 1 : 0 );
			f.Write( 8765 );
		}
	}
}